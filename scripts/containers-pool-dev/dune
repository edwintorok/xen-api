; this takes a few seconds, so only done upon request
(rule
  ; external dependency, not cachable by dune
  (alias opam-update)
  (deps (universe))
  (action
    (run opam update -R %{env:REPOSITORY=xs-opam}))
)

; generate list of OS packages
; opam monorepo depext would filter out OS packages that are already installed,
; so use plain opam to query
(rule
  (target depext.packages)
  (deps (:lockfile ../../xapi.opam.locked))
  (action
    (with-stdout-to %{target}
     (setenv OPAMVAR_arch x86_64
     (setenv OPAMVAR_os_family centos
     (setenv OPAMVAR_os_distribution centos
     (setenv OPAMVAR_os_version 7
      (run opam show -f depexts %{lockfile}))))))))

; find docker/podman callable from dune
(rule
  (target container_cli)
  (deps dune detect_container_cli.sh)
  (action
    (progn
      (with-stdout-to %{target}
       (progn
         (echo "#/bin/sh\nset -eu\n")
         (run ./detect_container_cli.sh)))
      (run chmod +x %{target}))
    )
  )

; find out the commit hash from a repo
(rule
  ; this takes a few seconds, so only done upon request
  (alias opam-update)
  (target xs-opam.commit)
  (action (with-stdout-to %{target}
                          (system "git ls-remote %{read-lines:xs-opam.url} refs/heads/master | cut -f1"))
))

(rule
 (target Containerfile.depext)
 (action (with-stdout-to %{target}
                         (run ./cpd_gen_depext.exe
                                        %{read-lines:xs-opam.url}
                                        %{read-lines:xs-opam.commit}
                                        )))
)

(copy_files ../../*.opam)

(rule
  (target Containerfile.depexts)
  (action (with-stdout-to %{target} (run ./cpd_gen_installdeps.exe %{read-lines:xs-opam.url}
                                         %{read-lines:xs-opam.commit} %{read-lines:depext.packages})))
)

; pin opam packages inside container for dependency resolution purposes,
; without source code to avoid taking ages to pin due to git clone/rsync
(rule
  (target xapi.opam.locked)
  (deps container_cli Containerfile.depexts (glob_files *.opam))
  (action (progn
            (system "./container_cli build -t cpd-depexts -f Containerfile.depexts .")
             (with-stdout-to %{target} (system "./container_cli run cpd-lock cat opamfiles/xapi.opam.locked"))
          ))
)

(executables
  (names cpd_gen_depext cpd_gen_installdeps)
  (libraries containergen))

(rule
  (target Containerfile)
  (action (with-stdout-to %{target} (run ./cpd_gen_depext.exe %{read-lines:xs-opam.repo.url}#%{read-lines:xs-opam-repository.commit})))
  (mode promote)
  )

(rule
  (alias docker-build)
  (deps (:containerfile Containerfile) (glob_files *.opam) (universe))
  (action
    (chdir %{project_root}
           (setenv DOCKER_BUILDKIT 1
                   (setenv BUILDKIT_PROGRESS plain
                  (setenv PROGRESS_NO_TRUNC 1
                   (run docker build -t cpd  -f %{containerfile} .))))))
)

(rule
  (alias podman-build)
  (deps (:containerfile Containerfile) (glob_files *.opam) (universe))
  (action
    (chdir %{project_root}
                   (run echo podman build -t cpd  -f %{containerfile} .))))
