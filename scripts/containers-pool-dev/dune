; find docker/podman callable from dune
(rule
  (target container_cli)
  (deps dune detect_container_cli.sh)
  (action
    (progn
      (with-stdout-to %{target}
       (progn
         (echo "#/bin/sh\nset -eu\n")
         (run ./detect_container_cli.sh)))
      (run chmod +x %{target}))
    )
  )

; this takes a few seconds, so only done upon request
(rule
  ; external dependency, not cachable by dune
  (alias opam-update-hash)
  (deps (universe))
  (action
    (run opam update -R %{env:REPOSITORY=xs-opam}))
)

(rule
  (target repository.tar.gz)
  ; quick hardlink if possible, otherwise copy where dune can see it
  (action (bash
            "ln %{env:HOME=}/.opam/repo/%{env:REPOSITORY=xs-opam}.tar.gz %{target} \
            || cp %{env:HOME=}/.opam/repo/%{env:REPOSITORY=xs-opam}.tar.gz %{target}"
          ))
)

(rule
  (target depext.packages)
  (deps repository.tar.gz container_cli Containerfile.depext)
  (action
    (progn
     (system "./container_cli build -t cpd-depext -f Containerfile.depext .")
     (system "./container_cli run cpd-depext cat depext.packages >depext.packages")
    )
  )
)

(executable
  (name cpd_gen)
  (libraries bos dockerfile))

(rule
  (target Containerfile)
  (action (with-stdout-to %{target} (run ./cpd_gen.exe %{read-lines:xs-opam.repo.url}#%{read-lines:xs-opam-repository.commit})))
  (mode promote)
  )

(rule
  (alias docker-build)
  (deps (:containerfile Containerfile) (glob_files *.opam) (universe))
  (action
    (chdir %{project_root}
           (setenv DOCKER_BUILDKIT 1
                   (setenv BUILDKIT_PROGRESS plain
                  (setenv PROGRESS_NO_TRUNC 1
                   (run docker build -t cpd  -f %{containerfile} .))))))
)

(rule
  (alias podman-build)
  (deps (:containerfile Containerfile) (glob_files *.opam) (universe))
  (action
    (chdir %{project_root}
                   (run echo podman build -t cpd  -f %{containerfile} .))))
