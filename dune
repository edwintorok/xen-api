(env
  (gprof
    (ocamlopt_flags (:standard -g -p -w -39))
    (flags (:standard -w -39))
  )
  (dev (flags (:standard -g -w -39)))
  (release
    (flags (:standard -w -39-6))
    (env-vars (ALCOTEST_COMPACT 1))
  )
)

(executable
  (name configure)
  (libraries dune-configurator findlib cmdliner unix))


(rule
  (with-stdout-to ctypesdir (run dirname %{lib:ctypes:cstubs_internals.h}))
)

; This is a single invocation but it is very quick (<0.2s),
; although depends on the machine sometimes can be ~1.5s too
; no need to parallelize, also output can be cached.
; Only depend on ML files that contain C stubs though,
; and these .ml also don't require preprocessing for easier use
(rule
  (deps
    ocaml/staticanalyzer/arity/lintcstubs_arity.exe
    (:mlfiles
      (glob_files ocaml/auth/*.ml)
      (glob_files ocaml/libs/log/*.ml)
      (glob_files ocaml/vhd-tool/src/channels.ml)
      (glob_files ocaml/xenopsd/c_stubs/*.ml)
      (glob_files ocaml/xxhash/lib/*.ml)
      (glob_files unixpwd/src/*.ml)
    ))
  (action
   (with-stdout-to primitives.h
     (run ocaml/staticanalyzer/arity/lintcstubs_arity.exe %{mlfiles})
   ))
)

(rule
  (deps
    ocaml/staticanalyzer/genmain/lintcstubs_genmain.exe
    (:cmtfiles
      (glob_files ocaml/auth/.pam.objs/byte/*.cmt)
      (glob_files ocaml/libs/log/.log.objs/byte/*.cmt)
      (glob_files ocaml/vhd-tool/src/.channel_stubs.objs/byte/*.cmt)
      (glob_files ocaml/xenopsd/c_stubs/.xc_stubs.objs/byte/*.cmt)
      (glob_files ocaml/xenopsd/c_stubs/.c_stubs.objs/byte/*.cmt)
      (glob_files ocaml/xxhash/stubs/.xxhash_bindings.objs/byte/*.cmt)
      (glob_files ocaml/xxhash/lib/.xxhash.objs/byte/*.cmt)
      (glob_files unixpwd/src/.unixpwd.objs/byte/*.cmt)
    )
   )
  (action
    (with-stdout-to primitives.model.c
      (run ocaml/staticanalyzer/genmain/lintcstubs_genmain.exe %{cmtfiles})
     )
   )
)

; once we upgrade to Dune 3.x we can use glob_files_rec here
(rule
  (targets xapi.sarif lintcstubs.stdout)
  (deps
    (package xapi-lintcstubs)
    (:headers (glob_files ocaml/auth/*.h) (glob_files unixpwd/c/*.h) primitives.h)
    (:runtime_model ocaml/staticanalyzer/model/ocaml_runtime.model.c)
    (:primitives_model primitives.model.c)
    (:cstubs
     (glob_files ocaml/auth/*.c)
     (glob_files ocaml/libs/log/*.c)
     (glob_files ocaml/vhd-tool/src/*.c)
     (glob_files ocaml/xenopsd/c_stubs/*.c)
     (glob_files unixpwd/c/unix*.c)))

  ; enable only errors from our analyses
  ; so that the paths in the .sarif will be correct a chdir is needed
            ; --disable warn.warning
  (action
    (progn
      (run rm -f goblint.sarif)
      (run ln -s %{read-lines:ctypesdir} ctypes)
      (with-stdout-to lintcstubs.stdout
        (run ocaml/staticanalyzer/lintcstubs.exe -o xapi.sarif --disable warn.info
            --disable warn.unsound --disable warn.imprecise
            --disable warn.deadcode
            --disable warn.behavior
            --set ana.activated "[\"ocamlcstubs\",\"escape\"]"
            --sarif -I %{ocaml_where}
            -I ocaml/auth -I ctypes -I unixpwd/c
            %{primitives_model}
            %{cstubs}
           ))))
 )
            ; --enable dbg.debug --enable dbg.verbose

(rule
 (alias analyze)
 (deps lintcstubs.stdout)
 (action (diff xapi.stdout.reference %{deps}))
)

; this takes a few seconds, so only done upon request
(rule
  ; external dependency, not cachable by dune
  (alias opam-update)
  (deps (universe))
  (action
    (run opam update -R %{env:REPOSITORY=xs-opam}))
)

; make the opam repository contents available as a file where dune can see it
; when this changes we potentially need to recompute the lock files
(rule
  (target repository.tar.gz)
  ; quick hardlink if possible, otherwise copy where dune can see it
  (action (bash
            "ln %{env:HOME=}/.opam/repo/%{env:REPOSITORY=xs-opam}.tar.gz %{target} \
            || cp %{env:HOME=}/.opam/repo/%{env:REPOSITORY=xs-opam}.tar.gz %{target}"
            )))

; generate opam monorepo lockfile
; Useful documentation:
; * https://ocaml.org/p/opam-monorepo/0.3.5/doc/workflows.html
; * https://ocaml.org/p/opam-monorepo/0.3.5/doc/lock.html
; * https://ocaml.org/p/opam-monorepo/0.3.5/doc/opam-provided.html

(rule
 (target opam-repolist)
 (deps (universe))
 (action (with-stdout-to %{target} (run opam repo list --short)))
)

; the package versions of opam-provided dependencies
; 'lwt' needs to be 'opam-provided' because it changes exists_if for logs.lwt
; TODO: check os-family on centos
(rule
  (target xapi.opam.locked)
  (deps repository.tar.gz
    ;    (:opam_files xapi.opam xe.opam message-switch.opam message-switch-cli.opam
    ;                                   forkexec.opam xapi-forkexecd.opam
    ;                                   xapi-networkd.opam)
        (:opam_files (glob_files *.opam))
        (glob_files *.opam) dune
        opam-repolist)
  (action (run opam monorepo lock
                --ocaml-version=%{ocaml_version}
                --opam-provided=[%{read-lines:conf.opam-provided}]
                --add-global-opam-vars=[[arch,x86_64],[os-distribution,centos],[os-family,centos],[os-version,7]]
                -v
                -l %{target}
                %{opam_files}))
  (mode promote)
)
